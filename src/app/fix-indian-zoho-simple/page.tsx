'use client';

import { useState, useEffect } from 'react';

export default function FixIndianZohoSimplePage() {
  const [debugData, setDebugData] = useState<any>(null);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');

  useEffect(() => {
    loadDebugData();
  }, []);

  const loadDebugData = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/fix-indian-zoho-simple');
      const data = await response.json();
      setDebugData(data);
    } catch (error) {
      setMessage('Failed to load debug data');
    } finally {
      setLoading(false);
    }
  };

  const clearTokens = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/fix-indian-zoho-simple', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'clear_tokens' })
      });
      const data = await response.json();
      
      if (data.success) {
        setMessage('🗑️ Tokens cleared successfully. Reloading debug data...');
        setTimeout(loadDebugData, 1000);
      } else {
        setMessage(`❌ Failed to clear tokens: ${data.error}`);
      }
    } catch (error) {
      setMessage('❌ Failed to clear tokens');
    } finally {
      setLoading(false);
    }
  };

  const testSimpleAuth = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/fix-indian-zoho-simple', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'test_simple_auth' })
      });
      const data = await response.json();
      
      if (data.success) {
        setMessage(`🇮🇳 ${data.message}`);
        // Use the OAuth URL generated by the server
        if (data.testConfig.oauthUrl) {
          window.open(data.testConfig.oauthUrl, '_blank');
          setMessage(prev => prev + ' - OAuth window opened for Indian server!');
        } else {
          setMessage(prev => prev + ' - OAuth URL not available. Check your ZOHO_CLIENT_ID environment variable.');
        }
      } else {
        setMessage(`❌ Failed to test Indian server: ${data.error}`);
      }
    } catch (error) {
      setMessage('❌ Failed to test Indian server');
    } finally {
      setLoading(false);
    }
  };

  const checkTokenStorage = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/fix-indian-zoho-simple', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'check_token_storage' })
      });
      const data = await response.json();
      
      if (data.success) {
        setMessage(`🔍 ${data.message} - Has tokens: ${data.hasTokens ? 'Yes' : 'No'}`);
        setTimeout(loadDebugData, 1000);
      } else {
        setMessage(`❌ Token storage check failed: ${data.error}`);
      }
    } catch (error) {
      setMessage('❌ Failed to check token storage');
    } finally {
      setLoading(false);
    }
  };

  const checkClientId = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/fix-indian-zoho-simple', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'check_client_id' })
      });
      const data = await response.json();
      
      if (data.success) {
        setMessage(`🔑 ${data.message} - Has Client ID: ${data.hasClientId ? 'Yes' : 'No'}${data.clientIdPreview ? ` (${data.clientIdPreview})` : ''}`);
      } else {
        setMessage(`❌ Client ID check failed: ${data.error}`);
      }
    } catch (error) {
      setMessage('❌ Failed to check client ID');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">🇮🇳 Fix Indian Zoho - Simple Approach</h1>
      
      <div className="bg-blue-50 p-6 rounded-lg mb-8">
        <h2 className="text-xl font-semibold mb-4">📋 Issue Analysis</h2>
        <p className="mb-4">
          Your Zoho CRM was working with the <strong>Indian server</strong> in commit <code className="bg-gray-200 px-2 py-1 rounded">d368dd9</code>.
        </p>
        <p className="mb-4">
          <strong>Root Cause:</strong> The token storage logic was changed from simple hardcoded Supabase credentials 
          to environment variables and service role keys, which may be causing authentication issues.
        </p>
        <p>
          <strong>Solution:</strong> Let's verify your Indian server configuration and fix any token storage issues.
        </p>
      </div>
      
      <div className="mb-8">
        <button
          onClick={loadDebugData}
          disabled={loading}
          className="bg-blue-600 text-white px-6 py-3 rounded-md hover:bg-blue-700 disabled:bg-blue-400 mr-4"
        >
          🔄 Refresh Debug Data
        </button>
        
        <button
          onClick={checkTokenStorage}
          disabled={loading}
          className="bg-yellow-600 text-white px-6 py-3 rounded-md hover:bg-yellow-700 disabled:bg-yellow-400 mr-4"
        >
          🔍 Check Token Storage
        </button>
        
        <button
          onClick={checkClientId}
          disabled={loading}
          className="bg-purple-600 text-white px-6 py-3 rounded-md hover:bg-purple-700 disabled:bg-purple-400 mr-4"
        >
          🔑 Check Client ID
        </button>
        
        <button
          onClick={clearTokens}
          disabled={loading}
          className="bg-red-600 text-white px-6 py-3 rounded-md hover:bg-red-700 disabled:bg-red-400 mr-4"
        >
          🗑️ Clear All Tokens
        </button>
        
        <button
          onClick={testSimpleAuth}
          disabled={loading}
          className="bg-green-600 text-white px-6 py-3 rounded-md hover:bg-green-700 disabled:bg-green-400"
        >
          🇮🇳 Test Indian Auth
        </button>
      </div>

      {message && (
        <div className="bg-gray-100 p-4 rounded-md mb-6">
          <h3 className="font-semibold mb-2">Status:</h3>
          <p>{message}</p>
        </div>
      )}

      {debugData && (
        <div className="space-y-6">
          {/* Server Configuration */}
          <div className="bg-yellow-50 p-4 rounded-md">
            <h3 className="text-lg font-semibold mb-2">🌐 Server Configuration:</h3>
            <div className="space-y-2">
              <div><strong>Indian Server:</strong> {debugData.debug.isIndianServer ? '✅ Yes' : '❌ No'}</div>
              <div><strong>Accounts URL:</strong> {debugData.debug.currentEnvironment.ZOHO_ACCOUNTS_URL || 'Not set'}</div>
              <div><strong>API Domain:</strong> {debugData.debug.currentEnvironment.ZOHO_API_DOMAIN || 'Not set'}</div>
            </div>
          </div>

          {/* Environment Variables */}
          <div className="bg-blue-50 p-4 rounded-md">
            <h3 className="text-lg font-semibold mb-2">🔧 Environment Variables:</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
              {Object.entries(debugData.debug.currentEnvironment).map(([key, value]) => (
                <div key={key} className="flex justify-between items-center bg-white p-2 rounded border">
                  <span className="font-mono text-sm">{key}:</span>
                  <span className={`text-sm ${value ? 'text-green-600' : 'text-red-600'}`}>
                    {typeof value === 'boolean' ? (value ? '✅ Set' : '❌ Missing') : String(value || 'Not set')}
                  </span>
                </div>
              ))}
            </div>
          </div>

          {/* Token Status */}
          <div className="bg-green-50 p-4 rounded-md">
            <h3 className="text-lg font-semibold mb-2">🔐 Token Status:</h3>
            <div className="space-y-2">
              <div><strong>Access Token:</strong> {debugData.debug.tokenStatus.hasAccessToken ? '✅ Present' : '❌ Missing'}</div>
              <div><strong>Refresh Token:</strong> {debugData.debug.tokenStatus.hasRefreshToken ? '✅ Present' : '❌ Missing'}</div>
              <div><strong>Token Valid:</strong> {debugData.debug.tokenStatus.accessTokenValid ? '✅ Valid' : '❌ Invalid'}</div>
              {debugData.debug.tokenStatus.accessTokenExpiresAt && (
                <div><strong>Expires At:</strong> {new Date(debugData.debug.tokenStatus.accessTokenExpiresAt * 1000).toLocaleString()}</div>
              )}
            </div>
          </div>

          {/* Stored Tokens */}
          {debugData.debug.storedTokens && (
            <div className="bg-yellow-50 p-4 rounded-md">
              <h3 className="text-lg font-semibold mb-2">💾 Stored Tokens:</h3>
              <div className="space-y-2">
                <div><strong>Has Access Token:</strong> {debugData.debug.storedTokens.hasAccessToken ? '✅ Yes' : '❌ No'}</div>
                <div><strong>Has Refresh Token:</strong> {debugData.debug.storedTokens.hasRefreshToken ? '✅ Yes' : '❌ No'}</div>
                {debugData.debug.storedTokens.accessTokenPreview && (
                  <div><strong>Access Token Preview:</strong> {debugData.debug.storedTokens.accessTokenPreview}</div>
                )}
                {debugData.debug.storedTokens.accessTokenExpiresAt && (
                  <div><strong>Expires At:</strong> {new Date(debugData.debug.storedTokens.accessTokenExpiresAt * 1000).toLocaleString()}</div>
                )}
              </div>
            </div>
          )}

          {/* Recommendations */}
          <div className="bg-orange-50 p-4 rounded-md">
            <h3 className="text-lg font-semibold mb-2">💡 Recommendations:</h3>
            <ul className="list-disc list-inside space-y-1">
              {debugData.debug.recommendations.map((rec: string, index: number) => (
                <li key={index} className="text-sm">{rec}</li>
              ))}
            </ul>
          </div>
        </div>
      )}

      <div className="mt-8 bg-yellow-50 p-4 rounded-lg">
        <h3 className="font-semibold mb-2">📋 Required Environment Variables for Indian Server:</h3>
        <div className="bg-white p-4 rounded border font-mono text-sm">
          ZOHO_CLIENT_ID=your_indian_zoho_client_id<br/>
          ZOHO_CLIENT_SECRET=your_indian_zoho_client_secret<br/>
          ZOHO_ACCOUNTS_URL=https://accounts.zoho.in<br/>
          ZOHO_API_DOMAIN=https://www.zohoapis.in<br/>
          ZOHO_REDIRECT_URI=https://infinitysols.com/api/oauth/callback<br/>
          SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key
        </div>
      </div>

      <div className="mt-8 bg-green-50 p-4 rounded-lg">
        <h3 className="font-semibold mb-2">🔗 Quick Links:</h3>
        <div className="space-y-2">
          <a href="/debug-oauth" className="text-blue-600 hover:underline block">
            🔍 OAuth Flow Debug
          </a>
          <a href="/debug-callback" className="text-blue-600 hover:underline block">
            🔍 OAuth Callback Debug
          </a>
          <a href="/test-indian-zoho" className="text-blue-600 hover:underline block">
            🧪 Test Indian Zoho Integration
          </a>
        </div>
      </div>
    </div>
  );
}
